import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from PIL import Image, ImageDraw, ImageFont

# --- –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ Render Environment ---
API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–º –¥–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# --- –ö–Ω–æ–ø–∫–∏ ---
start_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç", callback_data="get_calc")
)

profession_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (500‚ÇΩ)", callback_data="get_prof")
)

consult_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (15000‚ÇΩ)", url="https://prodamus.ru/your-link")
)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω—É–º–µ—Ä–æ–ª–æ–≥.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π –∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=start_kb
    )

@dp.callback_query_handler(lambda c: c.data == "get_calc")
async def ask_birthdate(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì")
    await callback.answer()

@dp.message_handler(regexp=r"^\d{2}\.\d{2}\.\d{4}$")
async def calc_square(message: types.Message):
    date = message.text
    user_data[message.from_user.id] = date

    img_path = generate_square(date)

    await message.answer_photo(open(img_path, "rb"), caption="–í–æ—Ç —Ç–≤–æ–π –∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞ ‚ú®")
    await message.answer("–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è?", reply_markup=profession_kb)

@dp.callback_query_handler(lambda c: c.data == "get_prof")
async def process_prof(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    date = user_data.get(user_id)

    if not date:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è üôÉ")
        return

    # –ø–æ–∫–∞ —ç–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)\n\n" + get_profession(date))
    await callback.message.answer("–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ê–ª–µ–∫—Å–µ–µ–º –ë–æ–ª—Ç–∞–µ–≤—ã–º:", reply_markup=consult_kb)
    await callback.answer()

# --- –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ ---
def get_digits(date: str):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –±–µ–∑ –Ω—É–ª–µ–π"""
    return [int(d) for d in date if d.isdigit() and d != "0"]

def calc_work_numbers(date: str):
    digits = get_digits(date)
    first = sum(digits)
    second = sum(map(int, str(first)))
    first_digit = int(date[0])
    third = first - (first_digit * 2)
    fourth = sum(map(int, str(third)))
    return [first, second, third, fourth]

def generate_square(date: str) -> str:
    digits = get_digits(date)
    work_nums = calc_work_numbers(date)
    all_nums = digits + [int(d) for d in "".join(map(str, work_nums)) if d != "0"]

    # —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥–∞—è —Ü–∏—Ñ—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è
    counts = {str(i): all_nums.count(i) for i in range(1, 10)}

    # —Ä–∏—Å—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É 3—Ö3
    img = Image.new("RGB", (300, 300), "white")
    draw = ImageDraw.Draw(img)
    font = ImageFont.load_default()

    # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–æ–∫
    cells = [
        (0, 0), (100, 0), (200, 0),
        (0, 100), (100, 100), (200, 100),
        (0, 200), (100, 200), (200, 200),
    ]

    idx = 1
    for (x, y) in cells:
        draw.rectangle([x, y, x + 100, y + 100], outline="black", width=2)
        draw.text((x + 40, y + 40), str(counts[str(idx)]), fill="black", font=font)
        idx += 1

    path = f"square_{date.replace('.', '')}.png"
    img.save(path)
    return path

def get_profession(date: str) -> str:
    digits = get_digits(date)
    first = sum(digits)
    second = sum(map(int, str(first)))
    first_digit = int(date[0])
    third = first - (first_digit * 2)
    fourth = sum(map(int, str(third)))

    return (
        f"üîÆ –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ –¥–∞—Ç–µ {date}\n\n"
        f"–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: {first}\n"
        f"–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: {second}\n"
        f"–¢—Ä–µ—Ç—å–µ —á–∏—Å–ª–æ: {third}\n"
        f"–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —á–∏—Å–ª–æ: {fourth}\n\n"
        f"üëâ –≠—Ç–∏ —á–∏—Å–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
    )

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
